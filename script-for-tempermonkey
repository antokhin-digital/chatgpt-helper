// ==UserScript==
// @name         chatGPT Helper 2.2
// @namespace    https://t.me/hellodigitalworld
// @version      2.2
// @description  Добавляет функционал для построчной генерации и сохранения этих строк в html формате
// @author       by @seo_pro доработан @andrew_seo
// @match        https://chatgpt.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    var ArticlePlan = {
        init: function() {
            if (!this.textarea) {
                this.createTextarea();
                this.articleContent = '';
            } else {
                this.textarea.style.display = this.textarea.style.display === 'none' ? 'block' : 'none';
            }
        },

        createTextarea: function() {
            this.textarea = document.createElement('div');
            this.textarea.style.position = 'fixed';
            this.textarea.style.bottom = '150px';
            this.textarea.style.right = '20px';
            this.textarea.style.width = '320px';
            this.textarea.style.height = '240px';
            this.textarea.style.zIndex = '10001';
            this.textarea.style.border = '1px solid #ccc';
            this.textarea.style.borderRadius = '5px';
            this.textarea.style.padding = '10px';
            this.textarea.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
            this.textarea.style.backgroundColor = '#fff';

            const closeButton = document.createElement('button');
            closeButton.textContent = '×';
            closeButton.style.position = 'absolute';
            closeButton.style.top = '5px';
            closeButton.style.right = '5px';
            closeButton.style.border = 'none';
            closeButton.style.background = 'none';
            closeButton.style.fontSize = '20px';
            closeButton.style.cursor = 'pointer';
            closeButton.onclick = () => { this.textarea.style.display = 'none'; };
            this.textarea.appendChild(closeButton);

            const textarea = document.createElement('textarea');
            textarea.style.width = '100%';
            textarea.style.height = 'calc(100% - 40px)';
            textarea.style.marginTop = '10px';
            textarea.style.resize = 'none'; // Запрещаем изменение размера пользователем
            this.textarea.appendChild(textarea);
            this.textareaElement = textarea;

            document.body.appendChild(this.textarea);
        },

        executePlan: async function() {
            if (!this.lines || this.lines.length === 0) {
                this.lines = this.textareaElement.value.split('\n').filter(line => line.trim() !== '');
            }

            if (this.lines.length > 0) {
                const line = this.lines.shift();
                this.textareaElement.value = this.lines.join('\n');
                await executeChatCommand(line, this.checkForCompletion.bind(this));
            } else {
                this.saveButton.style.display = 'block';
            }
        },

        checkForCompletion: function() {
            if (this.lines.length > 0) {
                setTimeout(() => {
                    this.executePlan();
                }, 1000);
            } else {
                this.saveButton.style.display = 'block';
            }
        },

        copyChatContent: function() {
            const chatContents = document.querySelectorAll('.markdown.prose.w-full.break-words.dark\\:prose-invert.light');
            let newContent = "";
            chatContents.forEach(content => {
                newContent += content.innerHTML + "<br>";
            });

            if (this.articleContent.trim() !== newContent.trim()) {
                this.articleContent = newContent;
            }
        },

        saveArticleContent: function() {
            this.copyChatContent();
            if (!this.articleContent.trim()) {
                alert("Статья пуста. Нет содержимого для сохранения.");
                return;
            }
            const blob = new Blob([this.articleContent], {type: 'text/html'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'article.html';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        },
    };

    async function executeChatCommand(text, callback) {
        //const inputSelector = document.querySelector('input[type="text"], textarea');
        //if (!inputSelector) {
        //    console.error("Input element not found.");
        //    return;
        //}

        //inputSelector.value = text;
        //inputSelector.dispatchEvent(new Event('input', { bubbles: true }));
        const inputSelector = document.querySelector('[contenteditable="true"]');
        if (!inputSelector) {
            console.error("Поле ввода не найдено.");
            return;
        }

        inputSelector.focus();
        const event = new InputEvent('input', {
            bubbles: true,
            cancelable: true,
            inputType: 'insertText',
            data: text
        });

inputSelector.textContent = text;
inputSelector.dispatchEvent(event);

        const sendButton = document.querySelector('button[data-testid="send-button"]');
        if (sendButton && !sendButton.disabled) {
            sendButton.click();
            if (callback) {
                callback();
            }
        } else {
            setTimeout(() => {
                executeChatCommand(text, callback);
            }, 500);
        }

        await new Promise(resolve => setTimeout(resolve, 1000));
        if (this.lines && this.lines.length > 0) {
            this.executePlan();
        }
    }

    function addCustomUI() {
        const menu = document.createElement('div');
        menu.style.position = 'fixed';
        menu.style.bottom = '47px';
        menu.style.right = '20px';
        menu.style.padding = '10px';
        menu.style.background = '#fff';
        menu.style.border = '1px solid #ccc';
        menu.style.borderRadius = '8px';
        menu.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
        menu.style.zIndex = '10000';
        document.body.appendChild(menu);

        const buttonStyle = `
            display: block;
            width: 100%;
            padding: 8px 0;
            margin-bottom: 5px;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            font-size: 14px;
            cursor: pointer;
            text-align: center;
            transition: background-color 0.3s ease;
        `;

        const addButton = document.createElement('button');
        addButton.textContent = 'Добавить задачу';
        addButton.style.cssText = buttonStyle;
        addButton.onclick = () => ArticlePlan.init();
        menu.appendChild(addButton);

        const executeButton = document.createElement('button');
        executeButton.textContent = 'Выполнить';
        executeButton.style.cssText = buttonStyle;
        executeButton.onclick = () => ArticlePlan.executePlan();
        menu.appendChild(executeButton);

        const saveButton = document.createElement('button');
        saveButton.textContent = 'Сохранить';
        saveButton.style.cssText = `${buttonStyle} display: none;`;
        saveButton.onclick = () => ArticlePlan.saveArticleContent();
        menu.appendChild(saveButton);
        ArticlePlan.saveButton = saveButton;

        const authorLink = document.createElement('a');
        authorLink.href = 'https://t.me/+3Qgyx8UikCwzNjcy';
        authorLink.textContent = 'by 🌏 Hello Digital World';
        authorLink.style.display = 'block';
        authorLink.style.marginTop = '5px';
        authorLink.style.textAlign = 'center';
        authorLink.style.fontSize = '12px';
        menu.appendChild(authorLink);

        const updateAuthorLinkPosition = (isSaveVisible) => {
            const yOffset = isSaveVisible ? '25px' : '25px';
            authorLink.style.bottom = yOffset;
        };

        let saveButtonVisible = false;

        const originalExecutePlan = ArticlePlan.executePlan.bind(ArticlePlan);
        ArticlePlan.executePlan = function() {
            originalExecutePlan();
            saveButtonVisible = this.saveButton.style.display !== 'none';
            updateAuthorLinkPosition(saveButtonVisible);
        };

        const originalSaveArticleContent = ArticlePlan.saveArticleContent.bind(ArticlePlan);
        ArticlePlan.saveArticleContent = function() {
            originalSaveArticleContent();
            saveButtonVisible = this.saveButton.style.display !== 'none';
            updateAuthorLinkPosition(saveButtonVisible);
        };

        updateAuthorLinkPosition(saveButtonVisible);
    }

    addCustomUI();
})();
